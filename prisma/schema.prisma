generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        String    @unique @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    title     String    @db.VarChar(255)
    published Boolean   @default(false)
    userId    String
    image     String?
    user      User      @relation(fields: [userId], references: [id])
    Comment   Comment[]
}

model Comment {
    id        String   @id @default(cuid())
    message   String
    postId    String
    userId    String
    createdAt DateTime @default(now())
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String       @id @default(cuid())
    name           String?
    nickname       String?
    email          String?      @unique
    image          String?      @default("https://lh3.googleusercontent.com/a/AAcHTtdeQNGhDUxaD0l-iZUJKYI6TqWw9B9nEcCssgaw2Joi68Y=s96-c")
    birthday       String?
    hashedPassword String?
    accounts       Account[]
    sessions       Session[]
    Post           Post[]
    Comment        Comment[]
    friendshipsA   Friendship[] @relation("FriendshipUserA")
    friendshipsB   Friendship[] @relation("FriendshipUserB")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Friendship {
    id          String  @id @default(uuid())
    userA       User    @relation("FriendshipUserA", fields: [userAId], references: [id])
    userAId     String
    userB       User    @relation("FriendshipUserB", fields: [userBId], references: [id])
    userBId     String
    isConfirmed Boolean @default(false)

    @@index([userAId])
    @@index([userBId])
}
